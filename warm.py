import os
import json
import requests
import logging
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes

# рд▓реЙрдЧрд┐рдВрдЧ рд╕реЗрдЯрдЕрдк
logging.basicConfig(format="%(asctime)s - %(levelname)s - %(message)s", level=logging.INFO)

# .env рд╕реЗ рдЯреЛрдХрди рдФрд░ рдПрдбрдорд┐рди рдЖрдИрдбреА рд▓реЛрдб рдХрд░реЗрдВ
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# рдбреЗрдЯрд╛ рд╕реНрдЯреЛрд░реЗрдЬ рдлрд╝рд╛рдЗрд▓
DATA_FILE = "user_data.json"

# рдЧреНрд▓реЛрдмрд▓ рд╡реЗрд░рд┐рдПрдмрд▓реНрд╕
user_data = {}
redeem_codes = {}
live_member_count = 0

# рдбреЗрдЯрд╛ рд▓реЛрдб рдХрд░рдиреЗ рдХрд╛ рдлрдВрдХреНрд╢рди
def load_data():
    global user_data, live_member_count
    try:
        with open(DATA_FILE, "r") as file:
            user_data = json.load(file)
            live_member_count = len(user_data)
    except (FileNotFoundError, json.JSONDecodeError):
        user_data = {}

# рдбреЗрдЯрд╛ рд╕реЗрд╡ рдХрд░рдиреЗ рдХрд╛ рдлрдВрдХреНрд╢рди
def save_data():
    with open(DATA_FILE, "w") as file:
        json.dump(user_data, file)

# рд╕реНрдЯрд╛рд░реНрдЯ рдХрдорд╛рдВрдб
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global live_member_count
    user_id = update.message.from_user.id
    user_name = update.message.from_user.first_name
    args = context.args

    referrer_id = args[0].replace("Bot", "") if args else None
    if referrer_id and int(referrer_id) != user_id and user_id not in user_data:
        user_data[user_id] = {'credits': 3, 'referrer': int(referrer_id)}
        user_data[int(referrer_id)]['credits'] += 1
        await context.bot.send_message(int(referrer_id), "ЁЯОЙ рдХреЛрдИ рдЖрдкрдХреЗ рд▓рд┐рдВрдХ рд╕реЗ рдЬреЙрдЗрди рд╣реБрдЖ! +1 рдХреНрд░реЗрдбрд┐рдЯ рдорд┐рд▓рд╛ ЁЯТ░")

    if user_id not in user_data:
        user_data[user_id] = {'credits': 3, 'referrer': None}
        live_member_count += 1
        save_data()

    invite_link = f"https://t.me/{context.bot.username}?start=Bot{user_id}"
    welcome_msg = f"ЁЯСЛ Welcome, {user_name} ЁЯОЙ\n\nЁЯТб Explore the bot options below.\n__________________________"

    keyboard = [
        [InlineKeyboardButton("ЁЯРН WORM GPT ЁЯРН", callback_data="worm_gpt"),
         InlineKeyboardButton("ЁЯТ░ CREDIT ЁЯТ░", callback_data="credit")],
        [InlineKeyboardButton("ЁЯФе DEV ЁЯФе", url="https://t.me/GOAT_NG")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(welcome_msg, reply_markup=reply_markup)

# рдмрдЯрди рд╣реИрдВрдбрд▓рд░
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    if query.data == "worm_gpt":
        keyboard = [[InlineKeyboardButton("BACK", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("ЁЯТм рдЕрдкрдиреА рдХреНрд╡реЗрд░реА рдиреАрдЪреЗ рдЯрд╛рдЗрдк рдХрд░реЗрдВ:", reply_markup=reply_markup)

    elif query.data == "credit":
        credits = user_data.get(user_id, {}).get("credits", 0)
        invite_link = f"https://t.me/{context.bot.username}?start=Bot{user_id}"
        message = f"ЁЯТ░ рдЖрдкрдХреЗ рдкрд╛рд╕ {credits} рдХреНрд░реЗрдбрд┐рдЯреНрд╕ рд╣реИрдВред\nЁЯУК рдХреБрд▓ рд╕рджрд╕реНрдп: {live_member_count}\n\n" \
                  f"ЁЯОЙ рдФрд░ рдХреНрд░реЗрдбрд┐рдЯреНрд╕ рдкрд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдкрдиреЗ рджреЛрд╕реНрддреЛрдВ рдХреЛ рдЗрдирд╡рд╛рдЗрдЯ рдХрд░реЗрдВ!\n\n" \
                  f"ЁЯФЧ [рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ]({invite_link})"
        keyboard = [[InlineKeyboardButton("BACK", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(message, reply_markup=reply_markup, parse_mode="Markdown")

    elif query.data == "main_menu":
        keyboard = [
            [InlineKeyboardButton("ЁЯРН WORM GPT ЁЯРН", callback_data="worm_gpt"),
             InlineKeyboardButton("ЁЯТ░ CREDIT ЁЯТ░", callback_data="credit")],
            [InlineKeyboardButton("ЁЯФе DEV ЁЯФе", url="https://t.me/GOAT_NG")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text("ЁЯТб рдореЗрдиреВ рдореЗрдВ рд╡рд╛рдкрд╕ред рдПрдХ рд╡рд┐рдХрд▓реНрдк рдЪреБрдиреЗрдВ:", reply_markup=reply_markup)

# рдпреВрдЬрд░ рдореЗрд╕реЗрдЬ рд╣реИрдВрдбрд▓рд░
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    text = update.message.text

    if user_data.get(user_id, {}).get("credits", 0) > 0:
        try:
            response = requests.get(f"https://ngyt777gworm.tiiny.io/?question={text}")
            answer = response.text.strip()

            user_data[user_id]['credits'] -= 1
            save_data()

            await update.message.reply_text(f"ЁЯТб *Answer* ЁЯТб \n\n{answer}", parse_mode="Markdown")

        except Exception as e:
            logging.error(f"Error fetching response: {e}")
            await update.message.reply_text("тЭМ рдХреБрдЫ рдЧрдбрд╝рдмрдбрд╝ рд╣реЛ рдЧрдИ, рдХреГрдкрдпрд╛ рдлрд┐рд░ рд╕реЗ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред")

    else:
        invite_link = f"https://t.me/{context.bot.username}?start=Bot{user_id}"
        await update.message.reply_text(f"тЪая╕П рдЖрдкрдХреЗ рдкрд╛рд╕ рдХреЛрдИ рдХреНрд░реЗрдбрд┐рдЯ рдирд╣реАрдВ рдмрдЪрд╛ред\n\n"
                                        f"ЁЯОЙ рдЗрдирд╡рд╛рдЗрдЯ рдХрд░рдХреЗ рдФрд░ рдХреНрд░реЗрдбрд┐рдЯреНрд╕ рдкрд╛рдПрдВ!\n\n"
                                        f"ЁЯФЧ [рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ]({invite_link})",
                                        parse_mode="Markdown")

# рдПрдбрдорд┐рди рджреНрд╡рд╛рд░рд╛ рд░рд┐рдбреАрдо рдХреЛрдб рдЬрдирд░реЗрдЯ рдХрд░рдирд╛
async def redeem(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.from_user.id != ADMIN_ID:
        await update.message.reply_text("тЭМ рдЖрдкрдХреЛ рдЗрд╕ рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреА рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ рд╣реИред")
        return

    try:
        code, value = context.args[0], int(context.args[1])
        redeem_codes[code] = value
        await update.message.reply_text(f"тЬЕ рдХреЛрдб `{code}` {value} рдХреНрд░реЗрдбрд┐рдЯреНрд╕ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░!", parse_mode="Markdown")
    except (IndexError, ValueError):
        await update.message.reply_text("тЭМ рдЧрд▓рдд рдлрд╝реЙрд░реНрдореЗрдЯ! рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ: `/redeem <code> <value>`")

# рдпреВрдЬрд░ рджреНрд╡рд╛рд░рд╛ рд░рд┐рдбреАрдо рдХреЛрдб рдЙрдкрдпреЛрдЧ рдХрд░рдирд╛
async def handle_redeem(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    try:
        code = context.args[0]
        if code in redeem_codes:
            user_data[user_id]['credits'] += redeem_codes.pop(code)
            save_data()
            await update.message.reply_text("тЬЕ рд░рд┐рдбреАрдо рд╕рдлрд▓!")
        else:
            await update.message.reply_text("тЭМ рдХреЛрдб рдЕрдорд╛рдиреНрдп рд╣реИред")
    except IndexError:
        await update.message.reply_text("тЭМ рдХреГрдкрдпрд╛ рдПрдХ рд░рд┐рдбреАрдо рдХреЛрдб рдкреНрд░рджрд╛рди рдХрд░реЗрдВред")

# рдмреЙрдЯ рд░рди рдХрд░рдирд╛
def main():
    load_data()
    application = Application.builder().token(BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.run_polling()

if __name__ == "__main__":
    main()
